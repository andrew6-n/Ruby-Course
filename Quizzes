Quiz 1

1. 1 2 3
2. != = not equals
   ?: = if else
   !! = turn any object to boolean
   !  = turn any object to opposite boolean equivalent
3. advice.gsub ('important','urgent')
4. numbers.delete_at(1) = remove 2
   numbers.delete(1) = remove 1
5. (10..100).cover(42)
6. famous.words = "Four score and" + famous_words
   famous.words.prepend("Four score and‚Äù)
7. 42
8. flintstones.flatten
9. flintstones.assoc("Barney")
10. flintstones_hash = {}
flintstones.each_with_index do |name, index|
  flintstones_hash[name] = index
end

Quiz 2

1. ages.key?("Spot")
2. ages.values.inject(:+)
3. ages.keep_if {[name,age] age<100 }
4. munsters_description.capitalize
   munsters_description.swapcase
   munsters_description.downcase
   munsters_description.upcase
5. ages.merge!(additional_ages)
6. ages.values.min
7. advice.match("Dino")
8. flintstones.index { |name| name[0, 2] == "Be" }
9. flinstones.map! do |name|  
      name [0,3]
  end
10. flintstones.map! { |name| name[0,3] }

Quiz 3

1. flintstones = %w(Fred Barney Wilma Betty BamBam Pebbles)
2. flintstones.push ("Dino")
3. flintstones.push("Dino").push("Hoppy")
4. advice.slice!(0, advice.index('house'))
5. statement.scan('t').count 
6. title.center(40)


Intermediate Quizzes

Quiz 1

1. 10.times {|number| puts (" " * number) + "The Flintstones Rock!"}
2. result = {}
   letters = ('A'..'Z').to_a + ('a'..'z').to_a 
   letters.each do |letter|
      letter_frequency = statement.scan(letter).count
      result |letter| = letter_frequency if letter_frequency > 0
   end
3. puts "the value of 40 + 2 is #{40 + 2}"
4. 1,3 
   1,2
5. while dividend > 0 do
  divisors << number / dividend if number % dividend == 0
  dividend -= 1
end
6. Yes
7. Ben defines limit before he calls fib
8. words.split.map { |word| word.downcase.capitalize }.join(' ')
9. munsters.each do |name, details|
  case details["age"]
  when 0...18
    details["age_group"] = "kid"
  when 18...65
    details["age_group"] = "adult"
  else 
    details["age_group"] = "senior"
  end
end

Quiz 2 

1. total_male_age = 0
munsters.each do |name, details|
  total_male_age += details["age"] if details["gender"] == "male"
end
2. munsters.each_pair do |name, details|
  puts "#{name} is a #{details['age']} year old #{details['gender']}"
end
3. def not_so_tricky_method(a_string_param, an_array_param)
  a_string_param += "rutabega"
  an_array_param += ["rutabega"]

  return a_string_param, an_array_param
end

my_string = "pumpkins"
my_array = ["pumpkins"]
my_string, my_array = not_so_tricky_method(my_string, my_array)

puts "My string looks like this now: #{my_string}"
puts "My array looks like this now: #{my_array}"
4. words = sentence.split(/\W/)
words.reverse!
backwards_sentence = words.join(' ') + '.'
5. 34
6. Spot will find himself in the "dog" house for this one. The family's data is all in a shambles now.
7. paper
8. no

Quiz 3

1. ugh ohhhhh
2. 
3. My string looks like this now: pumpkins
My array looks like this now: ["pumpkins", "rutabaga"]   
4. My string looks like this now: rutabaga
My array looks like this now: ["pumpkins"]
5. def color_valid(color)
    color == "blue" || color == "green"
  end

Advanced Questions 

Quiz 1

1. nil
2. {:a=>"hi there"}
3. A)
      "one is: one"
      "two is: two"
      "three is: three"
   B)

      "one is: one"
      "two is: two"
      "three is: three"
  C)

      "one is: two"
      "two is: three"
      "three is: one"
4. def generate_UUID
    characters = [] 
    (0..9).each { |digit| characters << digit.to_s }
    ('a'..'f').each { |digit| characters << digit }

    uuid = ""
    sections = [8, 4, 4, 4, 12]
    sections.each_with_index do |section, index|
      section.times { uuid += characters.sample }
      uuid += '-' unless index >= sections.size - 1
    end

    uuid
end
5. def dot_separated_ip_address?(input_string)
  dot_separated_words = input_string.split(".")
  return false unless dot_separated_words.size == 4

  while dot_separated_words.size > 0 do
    word = dot_separated_words.pop
    return false unless is_a_number?(word)
  end

  true
end

Note: Ben's original `return true` on the last line of the method can be shortened to just `true`. This is because Ruby returns the result of the last line of any method by default.



